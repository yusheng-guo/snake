// package main

// import (
// 	_ "image/png"
// 	"log"

// 	"github.com/hajimehoshi/ebiten/v2"
// 	"github.com/hajimehoshi/ebiten/v2/ebitenutil"
// )

// var img *ebiten.Image

// func init() {
// 	var err error
// 	img, _, err = ebitenutil.NewImageFromFile("avatar.png")
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// }

// type Game struct{}

// func (g *Game) Update() error {
// 	return nil
// }

// func (g *Game) Draw(screen *ebiten.Image) {
// 	screen.DrawImage(img, nil)
// }

// func (g *Game) Layout(outsideWidth, outsideHeight int) (screenWidth, screenHeight int) {
// 	return 720, 720
// }

// func main() {
// 	ebiten.SetWindowSize(1920, 1080)
// 	ebiten.SetWindowTitle("Render an image")
// 	if err := ebiten.RunGame(&Game{}); err != nil {
// 		log.Fatal(err)
// 	}
// }

// package main

// import (
// 	"image/color"
// 	"log"

// 	"github.com/hajimehoshi/ebiten/v2"
// )

// type Game struct{}

// func (g *Game) Update() error {
// 	return nil
// }

// func (g *Game) Draw(screen *ebiten.Image) {
// 	screen.Fill(color.RGBA{0xff, 0, 0, 0xff})
// }

// func (g *Game) Layout(outsideWidth, outsideHeight int) (screenWidth, screenHeight int) {
// 	return 320, 240
// }

// func main() {
// 	ebiten.SetWindowSize(640, 480)
// 	ebiten.SetWindowTitle("Fill")
// 	if err := ebiten.RunGame(&Game{}); err != nil {
// 		log.Fatal(err)
// 	}
// }

// package main

// import (
// 	"log"

// 	"github.com/hajimehoshi/ebiten/v2"
// 	"github.com/hajimehoshi/ebiten/v2/ebitenutil"
// )

// type Game struct{}

// func (g *Game) Update() error {
// 	return nil
// }

// func (g *Game) Draw(screen *ebiten.Image) {
// 	ebitenutil.DebugPrint(screen, "Hello, World!")
// }

// func (g *Game) Layout(outsideWidth, outsideHeight int) (screenWidth, screenHeight int) {
// 	return 320, 240
// }

// func main() {
// 	ebiten.SetWindowSize(640, 480)
// 	ebiten.SetWindowTitle("Hello, World!")
// 	if err := ebiten.RunGame(&Game{}); err != nil {
// 		log.Fatal(err)
// 	}
// }

// package main

// import (
// 	"image/color"
// 	"log"

// 	"github.com/hajimehoshi/ebiten/v2"
// )

// // Game implements ebiten.Game interface.
// type Game struct{}

// // Update proceeds the game state.
// // Update is called every tick (1/60 [s] by default).
// func (g *Game) Update() error {
// 	// Write your game's logical update.
// 	return nil
// }

// // Draw draws the game screen.
// // Draw is called every frame (typically 1/60[s] for 60Hz display).
// func (g *Game) Draw(screen *ebiten.Image) {
// 	// Write your game's rendering.
// 	screen.Fill(color.Opaque)
// }

// // Layout takes the outside size (e.g., the window size) and returns the (logical) screen size.
// // If you don't have to adjust the screen size with the outside size, just return a fixed size.
// func (g *Game) Layout(outsideWidth, outsideHeight int) (screenWidth, screenHeight int) {
// 	return 320, 240
// }

// func main() {
// 	game := &Game{}
// 	// Specify the window size as you like. Here, a doubled size is specified.
// 	ebiten.SetWindowSize(640, 480)
// 	ebiten.SetWindowTitle("Your game's title")

// 	// Call ebiten.RunGame to start your game loop.
// 	if err := ebiten.RunGame(game); err != nil {
// 		log.Fatal(err)
// 	}
// }
